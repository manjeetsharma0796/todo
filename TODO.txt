I was using DOM information

need to work on maintaining data myself,
need to reduce asking data from DOM

Implement MVC

Tasks

  1.Take info from uses
  2.Store Information
  3.Console to confirm

  -----------------
  for 6th requirement

  1. create sort alphabetical button in html and commit
  2. add handler onclick what will happen
    pseudocode

    sortAlphabetical.onclick =() => {
      removeAllChild from todoListContainer
      sort the taskData
      taskData.forEach((task) => {
        createElement
        append;
      });
    };



tasks = [{name: 'this', taskCompleted: false},
{name: 'this is again', taskCompleted: false}, 
{name: 'aloo', taskCompleted: false}]

for sorting
tasks.toSorted((task1, task2) => task1.name < task2.name ? -1 : 1);

-----------------

TaskList = [{
  description:'buy milk', 
  taskCompleted : false,
},
{
  description:'buy milk', 
  taskCompleted : false,
}];

it will be easy to maintain taskList data and prevent it from leaking

possible methods that can be applied
 1. mark(indexID) => adds css class mark from element
 2. clearMark(indexID) => removes css class mark from element
 3. add(task) => add task to the list

--------------

to manage the data inside taskList and represent we have 

TaskListController {
  constructor (taskList) {
    this.taskList = taskList;
  }

  #createTaskElement

  addToTaskList(description) {
    const task = {description, taskCompleted:false};
    this.#taskList.addTask(task);
  }

  #sort(list) {
    return sortedList;
  }

  render() {
    if(isSortedButtonOn) #sort
    append;
  }
}


---------------
current flow of program

if clicked any task element
1. createTask
    - gets value
    - adds task to taskList
    - reset value
    - createTaskElement
    - addClickEvent
    - append

2. if sort button triggers
    - removes children from container
    - uses sort method of taskList
    - then uses the data of taskList
    - .forEach 
        createTaskElement, 
        addClickEvent, 
        append


 ---------
  feedback
  1. Pulling out functions into at the very start and reusablity isn't used , so why not inline
  2. see others code and understand
  3. work on ui, it todo each element highlight, 
  4. from my side: alignment, coloring, highlighting

Not sure

const toggleStatus = (status, element) => {
  if (status) {
    element.onclick = () => {
      element.classList.remove("marked");
    };
  } else {
    element.onclick = () => {
      element.classList.add("marked");
      toggleStatus(status, element);
    };
  }
};

----------------
Note: Todo is a list of task.

Entities

Models

1. Task
2. Todo

Controller

3. TodoController

-------------
Behaviour/Methods

Task = {description:"Buy Soda", taskCompleted: false, taskID: 1};

  - checkTask()
  - uncheckTask()

Todo = [task, task, task];
fields will also have taskCount

  - addTask
  - sortAlphabetical
  - allTask

TodoController will have Todo and renderer

  - sortAlphabetical
  - render

--------------

Requirement Delete button

every task will have container 
and in each container it will consist of :
  1. task (para element)
  2. delete(input:button)


main is task menu               | RENDER TASK MENU

each task is contained in section with p element as title

p 
section - task-details and add task
section - sort options with three inputs

article is the wrapper of tasks |
each task is section            |RENDERTASK

section consist of a para and input for delete
--------------------

data storing

1. Task
    description, 
    id, 
    completionStatus

    >Behaviour
    toggle status of task
    
2. Todo
    name, 
    id,
    taskList (array)

    >Behaviour
    1. adding a new task
    2. deleting a task
    3. toggle taskstatus
    4. sort

3. Todos
    todoList 

    
    >Behaviour
    1. adding a new todo(title)
    2. deleting a todo(id)
    3. adding a new task(todoId, taskId)
    4. deleting a task(todoId, taskId)
    5. toggle taskstatus(todoId, taskId)
    6. sort(todoId);

==> 

todos.getDetails = 
[
  {
    todoID: 1, 
    title: "study", 
    tasks: 
      [
        {id: 1, description: "milk" },
        {id: 2, description: "tomato"} 
      ] 
  },
]
t1 = 

--------------------
[*] retrieve from localStorage
[*] loading page from server side
[*] order the directory structure
[] how to maintain data on server side; is it file
[] add element to delete todo

issue in storing task, on refreshing it removes tasks
